rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Wine master data - public read, authenticated write with validation
    match /wines_master/{wineId} {
      allow read: if true;
      allow create: if request.auth != null &&
        request.resource.data.wineName != null &&
        request.resource.data.producer != null &&
        request.resource.data.country != null &&
        request.resource.data.region != null &&
        request.resource.data.createdBy == request.auth.uid;

      allow update: if request.auth != null &&
        resource.data.createdBy == request.auth.uid &&
        // Immutable fields
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Tasting records - only the owner can access with validation
    match /tasting_records/{recordId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;

      allow create: if request.auth != null;

      allow update: if request.auth != null && resource.data.userId == request.auth.uid &&
        // Immutable fields
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.createdAt == resource.data.createdAt &&
        // Re-validate constraints on update
        request.resource.data.overallRating >= 0 && request.resource.data.overallRating <= 10 &&
        request.resource.data.tastingDate <= request.time &&
        (request.resource.data.recordMode == 'quick' || request.resource.data.recordMode == 'detailed') &&
        (request.resource.data.images == null || request.resource.data.images.size() <= 10);

      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User stats - only the owner can read/write
    match /user_stats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Wine records (legacy) - only the owner can read/write their records
    match /wines/{wineId} {
      allow read: if resource.data.isPublic == true || (request.auth != null && resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Drafts - only the owner can access
    match /drafts/{draftId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // User badges - only the owner can read, system can write
    match /user_badges/{badgeId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Daily goals - only the owner can access
    match /daily_goals/{goalId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Quiz progress - only the owner can access
    match /quiz_progress/{progressId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Deleted items with TTL - only the owner can access
    match /deleted_items/{itemId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
    }
  }
}